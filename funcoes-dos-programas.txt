Descrição dos programas utilizados{
    Visual Studio Code: É o editor de código que possui um compilador

    Node: Framework necessário para funcionar o servidor (instalado via chocolatey)

    chocolatey: Ferramenta para instalação dos programas diretamente do PowerShell

    nodemon: Framework para reiniciar automaticamente o servidor

    Express: Framework para auxiliar a criação das rotas do API

    NPM: Instalador de pacotes do Node

    NPX: Parecido com NPM porém ao invés de instalar apenas executa

    Knex: Query builder, auxilia a criação de querys para utilizar banco de dados

    CORS: Módulo de segurança, determina quem vai poder acessar nossa aplicação [npm install cors]

    react-icons: biblioteca de icones

    react-router-dom:
}
Listagem dos comandos utilizados no terminal do VScode{
    npm start: comando configurado no arquivo package.json na parte de scripts que roda o comando 'nodemon src/index.js'
    npx [...]: comando para executar um Framework, por exemplo npx knex: cria o arquivo knexfile.js que configura o banco de dados

}

Descrição dos arquivos e pastas do projeto{
    Criados pelo usuário{
        index.js: arquivo principal da aplicação;

        routes.js: arquivo para armazenar as rotas da api;

        [pasta]database: armazena os arquivos de banco de dados e conexões{
            [pasta]migrations: os arquivos aqui dentro são gerados automaticamente quando se executa o comando 'npx knex migrate:make <nome da migration>
            connections.js: armazena as instruções de conexão com o banco de dados
        }
        [pasta]controllers: armazena os métodos de controle, por exemplo o método para inserir uma nova ong, buscar, etc..
    
    }
    Criados automaticamente{
        knexfile.js: arquivo que armazena todos os parametros de do banco de dados
        package-lock.json: arquivo que serve apenas para referenciar todas as dependencias
        package.json: arquivo onde se configura comandos(scripts) e lista as dependencias diretas
    }

}
Migrations{
    serevm para armazenar o historico de criacao, exclusao e tudo que se refere aos banco de dados
    olhar documentação do knex: knexjs.org

    métodos{
        npx knex migrate:make <nome da migration>
            dentro da migration você deve especificar os nomes da tabela e das colunas a serem criadas

        npx knex migrate:latest
            atualiza as tabelas conforme a ultima versão do arquivo criado pelo comando acima
    
        npx knex migrate:rollback
            volta a versão anterior, antes de rodar o comando ascima

        npx knex migrate:status
            ve todasas migrations já executadas
    }
}
Pacotes auxiliares{
    Express: auxilia a criação de rotas da API 
        const express = require('express')

    crypto: serve para criar id automatica de forma aleatória neste sistema. A principal função na verdade é criptografar. Vem junto com o node:
        const crypto = require('crypto')
}
Gihub{
    Ferramenta que cria repositórios online para o projeto ficar em nuvem (apenas os arquivos, não executa em nuvem)
    para configurar{
        Baixe no site git-scm.com e instale
        Abra o visual Studio
        Caso seja a primeira vez, você deve utilizar os seguintes comandos para validar:
            git config --global user.name "Seu nome e seobrenome"
            git config --global user.email seuemail@example.com
        Tenha certeza que no explorer estão aparecendo todas as pastas do projeto (backend e frontend)
        Dentro do backend, crie um arquivo chamado .gitignore e escreva ali o nome de todos os arquivos que não serão enviados ao github(geralmente não se faz o upload da pasta node_modules)
        Ao lado esquerdo do explorer, clique no terceiro icone
        Lá irá aparecer um botao para iniciar o repositórios
        Vai aparecer todos os arquivos não atualizados
        Confirme
        Caso necessário faça login
    }
}

React{
    React é uma ferramenta que usa a abordagem SPA, onde as páginas não são feitas individualmente, como na abordagem tradicional, sendo enviadas para o frontend processar
    para criar um projeto no react, pelo powershell entre na pasta onde será criada a pasta do projeto(nosso projeto foi criado com o nome frontend) dê o comando npm create-react-app <nomedoprojeto>
        será criada a pasta com todos os arquivos necessários e com um arquivo de exemplo.
        pode apagar apagar os seguintes arquivos e importações:
            src>
                readme.md
                App.css
                App.test.js
                Index.css
                Logo.svg
                serviceWorker.js
                setubTeste.js
                dentro do index.js>
                    remove as importações>
                    index.css
                    serviceWorker (comentarios e a parte de baixo do service serviceWorker)
                dentro do App.js>
                    remove as importações>
                        app.css
                        logo.svg
                    remove o conteúdo>
                        remove todo o html interno, deixa apenas o que tiver fora de return() <<pode deixar um <h1>Hello word</h1>
            public>
                robots.txt
                manifest.json
                logos
                dentro de index.html>
                    todo o meta, link (deixar apenas o title)
    useEffect:{
        este método é muito importante pois executa automaticamente uma função assim que houver uma alteração em algum componente do código, exemplo:
        import React, {useEffect} from 'react' //faz a importação

        export default function <nomedafuncao>(){
            useEffect(()=>{
                
            },[<elementomonitorado>]) //primeiro parâmetro é a função que será executada, o segundo é a varivável que será monitorada. caso esteja vazio, será executada apenas uma vez
        }
        

    }



    JSX:
        Quando um HTML está ecrito dentro de um .js, esse conceito é chamado de JSX (JavaScript XML)
    Propriedades:
        São atributos passados dentro do JSX usando chaves ex:{props.title} (props é o parametro e title é a propriedade)
        Dentro do arquivo que vai ser chamado, deve se usar a seguinte sintaxe: return(<Header title="" />) onde Header é 
        
        Caso queira utilizar o conteúdo dentro do proprio Header, você pode usar a propriedade automatica: props.children.
    
    Estado:
        é uma informação que vai ser mantida pelo componente
        é necessário na importação, alem do React, importar tambem p useState: import React, { useState} from 'react';
        a variável que será modificada, ao invés de ser declarada literalmente, deve se usar useState(0)
        porém, por causa do conceito de imutabilidade, não podemos apenas incrementar o valor do useState durante a execução das funções..
            precisamos desmembrar essa função com um array. exemplo:{
                  let [counter,setCounter] = useState(0);
                  //para somar 1 a cada vez que rodar a função, deve se utilizar:
                  setCounter(counter+1);

            }
    
}